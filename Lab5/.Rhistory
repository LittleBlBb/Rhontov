filtered_data <- filtered_data[, !(names(filtered_data) %in% c("Rank"))]
}
# Сохраняем данные для каждой страны в отдельный CSV-файл
for (country in countries) {
country_data <- filtered_data[filtered_data$Country == country, ]
if (nrow(country_data) > 0) {
file_path <- file.path(output_dir, paste0(country, ".csv"))
write.csv(country_data, file_path, row.names = FALSE)
} else {
message("Нет данных для страны: ", country)
}
}
print("Файлы успешно сохранены в папку")
# Преобразуем данные в длинный формат
long_data <- gather(filtered_data, key = "Index", value = "Value", -Country, -Year)
if ("Rank" %in% unique(long_data$Index)) {
long_data <- long_data[long_data$Index != "Rank", ]
}
plot_dir <- file.path(output_dir, "plots")
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
# Построение и сохранение отдельных графиков
unique_indexes <- unique(long_data$Index)
for (index in unique_indexes) {
plot_data <- sort(long_data[long_data$Index == index, ])
if (nrow(plot_data) > 0) {
p <- ggplot(plot_data, aes(x = Year, y = Value, color = Country, group = Country)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = paste("Изменение", index, "по годам"), x = "Год", y = "Значение индекса")
print(p)
ggsave(filename = file.path(plot_dir, paste0(index, ".png")), plot = p, width = 8, height = 5)
}
}
library(rvest)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
get_numbeo_data <- function(year) {
url <- paste0("https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=", year)
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
if (length(tables) < 2) {
stop("Не удалось найти нужную таблицу на странице: ", url)
}
data <- html_table(tables[2], fill = TRUE)[[1]]
data$Year <- year
if ("Rank" %in% colnames(data)) {
data <- data[, !(names(data) %in% c("Rank"))]
}
return(data)
}
years <- 2014:2021
numbeo_data <- do.call(rbind, lapply(years, get_numbeo_data))
if ("Rank" %in% colnames(numbeo_data)) {
numbeo_data <- numbeo_data[, !(names(numbeo_data) %in% c("Rank"))]
}
# Фильтруем данные для выбранных стран
countries <- c("Turkey", "Spain", "Romania", "Slovenia", "Germany")
filtered_data <- numbeo_data[numbeo_data$Country %in% countries, ]
# Указываем путь к папке для сохранения файлов
output_dir <- "C:/Users/Kurdicks/Desktop/r yazik/Excel"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
if ("Rank" %in% colnames(filtered_data)) {
filtered_data <- filtered_data[, !(names(filtered_data) %in% c("Rank"))]
}
# Сохраняем данные для каждой страны в отдельный CSV-файл
for (country in countries) {
country_data <- filtered_data[filtered_data$Country == country, ]
if (nrow(country_data) > 0) {
file_path <- file.path(output_dir, paste0(country, ".csv"))
write.csv(country_data, file_path, row.names = FALSE)
} else {
message("Нет данных для страны: ", country)
}
}
print("Файлы успешно сохранены в папку")
# Преобразуем данные в длинный формат
long_data <- gather(filtered_data, key = "Index", value = "Value", -Country, -Year)
if ("Rank" %in% unique(long_data$Index)) {
long_data <- long_data[long_data$Index != "Rank", ]
}
plot_dir <- file.path(output_dir, "plots")
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
# Построение и сохранение отдельных графиков
unique_indexes <- unique(long_data$Index)
for (index in unique_indexes) {
plot_data <- long_data[long_data$Index == index, ]
if (nrow(plot_data > 0)) {
p <- ggplot(sort(plot_data), aes(x = Year, y = Value, color = Country, group = Country)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = paste("Изменение", index, "по годам"), x = "Год", y = "Значение индекса")
print(p)
ggsave(filename = file.path(plot_dir, paste0(index, ".png")), plot = p, width = 8, height = 5)
}
}
library(rvest)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
get_numbeo_data <- function(year) {
url <- paste0("https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=", year)
webpage <- read_html(url)
tables <- html_nodes(webpage, "table")
if (length(tables) < 2) {
stop("Не удалось найти нужную таблицу на странице: ", url)
}
data <- html_table(tables[2], fill = TRUE)[[1]]
data$Year <- year
if ("Rank" %in% colnames(data)) {
data <- data[, !(names(data) %in% c("Rank"))]
}
return(data)
}
years <- 2014:2021
numbeo_data <- do.call(rbind, lapply(years, get_numbeo_data))
if ("Rank" %in% colnames(numbeo_data)) {
numbeo_data <- numbeo_data[, !(names(numbeo_data) %in% c("Rank"))]
}
# Фильтруем данные для выбранных стран
countries <- c("Turkey", "Spain", "Romania", "Slovenia", "Germany")
filtered_data <- numbeo_data[numbeo_data$Country %in% countries, ]
# Указываем путь к папке для сохранения файлов
output_dir <- "C:/Users/Kurdicks/Desktop/r yazik/Excel"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
if ("Rank" %in% colnames(filtered_data)) {
filtered_data <- filtered_data[, !(names(filtered_data) %in% c("Rank"))]
}
# Сохраняем данные для каждой страны в отдельный CSV-файл
for (country in countries) {
country_data <- filtered_data[filtered_data$Country == country, ]
if (nrow(country_data) > 0) {
file_path <- file.path(output_dir, paste0(country, ".csv"))
write.csv(country_data, file_path, row.names = FALSE)
} else {
message("Нет данных для страны: ", country)
}
}
print("Файлы успешно сохранены в папку")
# Преобразуем данные в длинный формат
long_data <- gather(sort(filtered_data), key = "Index", value = "Value", -Country, -Year)
View(filtered_data)
View(long_data)
View(country_data)
View(filtered_data)
library(rvest)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
html_list <- list()
nodes_list <- list()
df_list <- list()
for (year in 2021:2014) {
url <- paste0('https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=', year)
html_page <- read_html(url)
html_list[[as.character(year)]] <- html_page
tables <- html_nodes(html_page, 'table')
nodes_list[[as.character(year)]] <- tables
df <- html_table(tables[[2]], fill = TRUE) %>% as.data.frame()
rownames(df) <- df[, 2]
df <- df[, 3:11]
df_list[[as.character(year)]] <- df
}
country <- c("Turkey", "Spain", "Romania", "Slovenia", "Germany")
colors <- c('blue', 'green', 'red', 'purple', 'gold')
plot_index_over_years <- function(index_name, df_list, years, countries, colors, title, ylabel, legend_pos = 'topright') {
index_data <- do.call(rbind, lapply(as.character(years), function(y) df_list[[y]][countries, index_name]))
index_df <- as.data.frame(index_data, row.names = years)
colnames(index_df) <- countries
mn <- min(index_df, na.rm = TRUE)
mx <- max(index_df, na.rm = TRUE)
plot(years, index_df[[countries[1]]], type = 'b', col = colors[1], lwd = 2, pch = 1, lty = 1,
ylim = c(mn - 13, mx + 13), xlab = 'Года', ylab = ylabel, main = title)
for (i in 2:length(countries)) {
lines(years, index_df[[countries[i]]], type = 'b', col = colors[i], lwd = 2, pch = 1, lty = 1)
}
legend(legend_pos, cex = 0.6, legend = countries, fill = colors)
return(index_df)
}
years_full <- 2014:2021
years_climate <- 2016:2021  # для Climate Index, так как 2014 и 2015 отсутствуют
# Построения графиков по индексам
QLI <- plot_index_over_years('Quality of Life Index', df_list, years_full, country, colors,
'Оценка индекса качества жизни', 'Индекс качества жизни', 'bottomright')
PPI <- plot_index_over_years('Purchasing Power Index', df_list, years_full, country, colors,
'Оценка индекса покупательной способности', 'Индекс покупательной способности')
SI <- plot_index_over_years('Safety Index', df_list, years_full, country, colors,
'Оценка индекса безопасности', 'Индекс безопасности')
HCI <- plot_index_over_years('Health Care Index', df_list, years_full, country, colors,
'Оценка индекс медицинского обслуживания', 'Индекс медицинского обслуживания', 'bottomright')
CLI <- plot_index_over_years('Cost of Living Index', df_list, years_full, country, colors,
'Оценка индекса прожиточного минимума', 'Индекс прожиточного минимума')
PPIR <- plot_index_over_years('Property Price to Income Ratio', df_list, years_full, country, colors,
'Оценка отношения цены на жилье к доходу', 'Отношение цены на жилье к доходу')
TCTI <- plot_index_over_years('Traffic Commute Time Index', df_list, years_full, country, colors,
'Оценка индекса времени движения на дороге', 'Индекс времени движения на дороге')
PI <- plot_index_over_years('Pollution Index', df_list, years_full, country, colors,
'Оценка индекса загрязнения', 'Индекс загрязнения')
CI <- plot_index_over_years('Climate Index', df_list, years_climate, country, colors,
'Оценка климатического индекса', 'Климатический индекс', 'bottomright')
# Загружаем страницу Википедии
url <- "https://ru.wikipedia.org/wiki/Список_музеев_Ростовской_области"
page <- read_html(url)
tables <- html_nodes(page, "table.wikitable")
museum_list <- lapply(tables, html_table, fill = TRUE)
museum_data <- bind_rows(museum_list)
names(museum_data) <- tolower(names(museum_data))
names(museum_data) <- gsub("\\s+", "_", names(museum_data))
museum_data <- museum_data %>%
rename(
Name = starts_with("назв"),
Location = matches("город|насел")
)
links <- page %>%
html_nodes("table.wikitable td:nth-child(1) a") %>%
html_attr("href")
full_links <- paste0("https://ru.wikipedia.org", links)
museum_data$Link <- NA
museum_data$Link[1:length(full_links)] <- full_links
# Просмотр результата
View(museum_data)
library(rvest)
library(ggplot2)
html_list <- list()
nodes_list <- list()
df_list <- list()
for (year in 2021:2014) {
url <- paste0('https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=', year)
html_page <- read_html(url)
html_list[[as.character(year)]] <- html_page
tables <- html_nodes(html_page, 'table')
nodes_list[[as.character(year)]] <- tables
df <- html_table(tables[[2]], fill = TRUE) %>% as.data.frame()
rownames(df) <- df[, 2]
df <- df[, 3:11]
df_list[[as.character(year)]] <- df
}
country <- c("Turkey", "Spain", "Romania", "Slovenia", "Germany")
colors <- c('blue', 'green', 'red', 'purple', 'gold')
plot_index_over_years <- function(index_name, df_list, years, countries, colors, title, ylabel, legend_pos = 'topright') {
index_data <- do.call(rbind, lapply(as.character(years), function(y) df_list[[y]][countries, index_name]))
index_df <- as.data.frame(index_data, row.names = years)
colnames(index_df) <- countries
mn <- min(index_df, na.rm = TRUE)
mx <- max(index_df, na.rm = TRUE)
plot(years, index_df[[countries[1]]], type = 'b', col = colors[1], lwd = 2, pch = 1, lty = 1,
ylim = c(mn - 13, mx + 13), xlab = 'Года', ylab = ylabel, main = title)
for (i in 2:length(countries)) {
lines(years, index_df[[countries[i]]], type = 'b', col = colors[i], lwd = 2, pch = 1, lty = 1)
}
legend(legend_pos, cex = 0.6, legend = countries, fill = colors)
return(index_df)
}
years_full <- 2014:2021
years_climate <- 2016:2021  # для Climate Index, так как 2014 и 2015 отсутствуют
# Построения графиков по индексам
QLI <- plot_index_over_years('Quality of Life Index', df_list, years_full, country, colors,
'Оценка индекса качества жизни', 'Индекс качества жизни', 'bottomright')
PPI <- plot_index_over_years('Purchasing Power Index', df_list, years_full, country, colors,
'Оценка индекса покупательной способности', 'Индекс покупательной способности')
SI <- plot_index_over_years('Safety Index', df_list, years_full, country, colors,
'Оценка индекса безопасности', 'Индекс безопасности')
HCI <- plot_index_over_years('Health Care Index', df_list, years_full, country, colors,
'Оценка индекс медицинского обслуживания', 'Индекс медицинского обслуживания', 'bottomright')
CLI <- plot_index_over_years('Cost of Living Index', df_list, years_full, country, colors,
'Оценка индекса прожиточного минимума', 'Индекс прожиточного минимума')
PPIR <- plot_index_over_years('Property Price to Income Ratio', df_list, years_full, country, colors,
'Оценка отношения цены на жилье к доходу', 'Отношение цены на жилье к доходу')
TCTI <- plot_index_over_years('Traffic Commute Time Index', df_list, years_full, country, colors,
'Оценка индекса времени движения на дороге', 'Индекс времени движения на дороге')
PI <- plot_index_over_years('Pollution Index', df_list, years_full, country, colors,
'Оценка индекса загрязнения', 'Индекс загрязнения')
CI <- plot_index_over_years('Climate Index', df_list, years_climate, country, colors,
'Оценка климатического индекса', 'Климатический индекс', 'bottomright')
# Загружаем страницу Википедии
url <- "https://ru.wikipedia.org/wiki/Список_музеев_Ростовской_области"
page <- read_html(url)
tables <- html_nodes(page, "table.wikitable")
museum_list <- lapply(tables, html_table, fill = TRUE)
museum_data <- bind_rows(museum_list)
names(museum_data) <- tolower(names(museum_data))
names(museum_data) <- gsub("\\s+", "_", names(museum_data))
museum_data <- museum_data %>%
rename(
Name = starts_with("назв"),
Location = matches("город|насел")
)
links <- page %>%
html_nodes("table.wikitable td:nth-child(1) a") %>%
html_attr("href")
full_links <- paste0("https://ru.wikipedia.org", links)
museum_data$Link <- NA
museum_data$Link[1:length(full_links)] <- full_links
# Просмотр результата
View(museum_data)
View(df_list)
install.packages("klaR")
install.packages("e1071")
install.packages("party")
install.packages("randomForest")
# обучение наивного байесовского классификатора
ind <- sample(2, nrow(clustered_data), replace = TRUE, prob = c(0.7, 0.3))
setwd("C:/Users/Kurdicks/Desktop/r yazik/Lab5")
library(e1071)
library(party)
library(randomForest)
set.seed(42)
# загрузка данных
clustered_data <- read.csv("clustered_data.csv")
clustered_data$cluster <- as.factor(clustered_data$cluster)
# обучение наивного байесовского классификатора
ind <- sample(2, nrow(clustered_data), replace = TRUE, prob = c(0.7, 0.3))
trainData <- clustered_data[ind == 1, ]
testData <- clustered_data[ind == 2, ]
nrow(trainData)
nrow(testData)
nrow(clustered_data)
bayes_model <- naiveBayes(cluster ~ ., data = trainData)
bayes_pred <- predict(bayes_model, newdata = testData)
cat("\nБайес: Точность =", round(mean(bayes_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = bayes_pred))
# testData[testData$cluster == 1, ]
# дерево решений
tree_model <- ctree(cluster ~ ., data = trainData)
tree_pred <- predict(tree_model, newdata = testData)
cat("\nДерево решений: Точность =", round(mean(tree_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = tree_pred))
plot(tree_model, main = "Дерево решений по кластерам")
# случайный лес
rf_model <- randomForest(cluster ~ ., data = trainData, ntree = 100, proximity = TRUE)
rf_pred <- predict(rf_model, newdata = testData)
cat("\nСлучайный лес: Точность =", round(mean(rf_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = rf_pred))
setwd("C:/Users/Kurdicks/Desktop/r yazik/Lab5")
library(e1071)
library(party)
library(randomForest)
set.seed(42)
# загрузка данных
clustered_data <- read.csv("clustered_data.csv")
clustered_data$cluster <- as.factor(clustered_data$cluster)
# обучение наивного байесовского классификатора
ind <- sample(2, nrow(clustered_data), replace = TRUE, prob = c(0.7, 0.3))
trainData <- clustered_data[ind == 1, ]
testData <- clustered_data[ind == 2, ]
nrow(trainData)
nrow(testData)
nrow(clustered_data)
bayes_model <- naiveBayes(cluster ~ ., data = trainData)
bayes_pred <- predict(bayes_model, newdata = testData)
cat("\nБайес: Точность =", round(mean(bayes_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = bayes_pred))
# testData[testData$cluster == 1, ]
# дерево решений
tree_model <- ctree(cluster ~ ., data = trainData)
tree_pred <- predict(tree_model, newdata = testData)
cat("\nДерево решений: Точность =", round(mean(tree_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = tree_pred))
plot(tree_model, main = "Дерево решений по кластерам")
# случайный лес
rf_model <- randomForest(cluster ~ ., data = trainData, ntree = 100, proximity = TRUE)
rf_pred <- predict(rf_model, newdata = testData)
cat("\nСлучайный лес: Точность =", round(mean(rf_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = rf_pred))
setwd("C:/Users/Kurdicks/Desktop/r yazik/Lab5")
library(factoextra)
library(cluster)
library(parameters)
library(scatterplot3d)
# 1. Чтение и предварительная обработка
raw_data <- read.csv("List of largest Internet companies.csv", header = TRUE)
clean_num <- function(x) {
as.numeric(gsub("[$,]", "", x))
}
raw_data$Revenue <- clean_num(raw_data$RevenueUSD.billions)
raw_data$Employees <- as.numeric(raw_data$Employees)
raw_data$MarketCap <- clean_num(raw_data$Market.cap.USD.billions)
raw_data$Founded <- as.numeric(raw_data$Founded)
clean_data <- na.omit(raw_data[, c("Company", "Revenue", "Employees", "MarketCap", "Founded")])
rownames(clean_data) <- clean_data$Company
# Логарифмирование (log(1 + x)) — особенно для масштабных переменных
log_data <- clean_data[, -1]
log_data$Founded <- log1p(log_data$Founded)
log_data$Revenue <- log1p(log_data$Revenue)
log_data$Employees <- log1p(log_data$Employees)
log_data$MarketCap <- log1p(log_data$MarketCap)
# 2. Дескриптивный анализ
cat("Статистика (логарифмированные данные):\n")
print(summary(log_data))
cat("\nСтандартное отклонение:\n")
print(sapply(log_data, sd))
cat("\nДисперсия:\n")
print(sapply(log_data, var))
for (col in colnames(log_data)) {
hist(log_data[[col]], main = paste("Распределение (log):", col),
xlab = col, col = "lightblue", border = "black")
}
boxplot(log_data, main = "Boxplot (log): Показатели интернет-компаний", col = rainbow(ncol(log_data)))
# 3. Нормализация и определение числа кластеров
maxs <- apply(log_data, 2, max)
mins <- apply(log_data, 2, min)
scaled_data <- scale(log_data, center = mins, scale = maxs - mins)
scaled_data <- as.data.frame(scaled_data)
fviz_nbclust(scaled_data, kmeans, method = "wss") + labs(title = "Метод локтя")
fviz_nbclust(scaled_data, kmeans, method = "silhouette") + labs(title = "Метод силуэта")
set.seed(123)
gap_stat <- clusGap(scaled_data, FUN = kmeans, nstart = 25, K.max = 6, B = 50)
fviz_gap_stat(gap_stat) + labs(title = "Статистика разрыва")
set.seed(123)
n_clust <- n_clusters(scaled_data, package = c("easystats", "NbClust", "mclust"), standardize = FALSE)
plot(n_clust)
# 4. Иерархическая кластеризация
dist_matrix <- dist(scaled_data)
hc <- hclust(dist_matrix, method = "ward.D2")
plot(hc, labels = rownames(clean_data), main = "Дендрограмма", cex = 0.7)
rect.hclust(hc, k = 3, border = "red")
# 5–6. K-means кластеризация
set.seed(123)
kmeans_result <- kmeans(scaled_data, centers = 3, nstart = 25)
clustered_data <- log_data
clustered_data$cluster <- as.factor(kmeans_result$cluster)
fviz_cluster(kmeans_result, data = scaled_data,
geom = "point", ellipse.type = "norm",
palette = "Set2", ggtheme = theme_minimal(),
main = "Кластеры компаний (log)")
# Барплот
means <- aggregate(. ~ cluster, data = clustered_data, mean)
df_t <- t(means[,-1])
barplot(df_t, beside = TRUE, ylim = c(0, max(df_t)+1),
col = c("red", "green", "blue"), main = "Средние значения по кластерам (log)")
legend("top", legend = rownames(df_t), fill = c("red", "green", "blue"), bty = "n")
# Boxplot
par(mfrow = c(2, 2))
for (col in colnames(log_data)) {
boxplot(clustered_data[[col]] ~ clustered_data$cluster,
main = paste("Boxplot по", col), col = c("red", "green", "blue"),
xlab = "Кластер", ylab = col)
}
par(mfrow = c(1, 1))
# Scatterplot
selected_vars <- c("Revenue", "Employees", "MarketCap")
colors <- c("red", "green", "blue")[clustered_data$cluster]
pairs(log_data[, selected_vars], col = colors, pch = 19, main = "Scatterplot кластеров (log)")
# 3D Scatterplot
scatterplot3d(log_data$Revenue, log_data$Employees, log_data$MarketCap,
color = colors, pch = 19, main = "3D scatterplot кластеров (log)",
xlab = "Revenue", ylab = "Employees", zlab = "MarketCap")
View(clean_data)
View(clustered_data)
View(clustered_data)
write.csv(clustered_data, "clustered_data.csv", row.names = FALSE)
setwd("C:/Users/Kurdicks/Desktop/r yazik/Lab5")
library(e1071)
library(party)
library(randomForest)
set.seed(42)
# загрузка данных
clustered_data <- read.csv("clustered_data.csv")
clustered_data$cluster <- as.factor(clustered_data$cluster)
# обучение наивного байесовского классификатора
ind <- sample(2, nrow(clustered_data), replace = TRUE, prob = c(0.7, 0.3))
trainData <- clustered_data[ind == 1, ]
testData <- clustered_data[ind == 2, ]
nrow(trainData)
nrow(testData)
nrow(clustered_data)
bayes_model <- naiveBayes(cluster ~ ., data = trainData)
bayes_pred <- predict(bayes_model, newdata = testData)
cat("\nБайес: Точность =", round(mean(bayes_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = bayes_pred))
# testData[testData$cluster == 1, ]
# дерево решений
tree_model <- ctree(cluster ~ ., data = trainData)
tree_pred <- predict(tree_model, newdata = testData)
cat("\nДерево решений: Точность =", round(mean(tree_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = tree_pred))
plot(tree_model, main = "Дерево решений по кластерам")
# случайный лес
rf_model <- randomForest(cluster ~ ., data = trainData, ntree = 100, proximity = TRUE)
rf_pred <- predict(rf_model, newdata = testData)
cat("\nСлучайный лес: Точность =", round(mean(rf_pred == testData$cluster) * 100, 2), "%\n")
cat("Таблица ошибок:\n")
print(table(Факт = testData$cluster, Прогноз = rf_pred))
View(bayes_model)
View(testData)
View(trainData)
View(trainData)
View(testData)
